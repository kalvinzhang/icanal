// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/canal_protocol.proto

package canal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Compression int32

const (
	Compression_COMPRESSIONCOMPATIBLEPROTO2 Compression = 0
	Compression_NONE                        Compression = 1
	Compression_ZLIB                        Compression = 2
	Compression_GZIP                        Compression = 3
	Compression_LZF                         Compression = 4
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "COMPRESSIONCOMPATIBLEPROTO2",
		1: "NONE",
		2: "ZLIB",
		3: "GZIP",
		4: "LZF",
	}
	Compression_value = map[string]int32{
		"COMPRESSIONCOMPATIBLEPROTO2": 0,
		"NONE":                        1,
		"ZLIB":                        2,
		"GZIP":                        3,
		"LZF":                         4,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_canal_protocol_proto_enumTypes[0].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_proto_canal_protocol_proto_enumTypes[0]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{0}
}

type PacketType int32

const (
	// compatible
	PacketType_PACKAGETYPECOMPATIBLEPROTO2 PacketType = 0
	PacketType_HANDSHAKE                   PacketType = 1
	PacketType_CLIENTAUTHENTICATION        PacketType = 2
	PacketType_ACK                         PacketType = 3
	PacketType_SUBSCRIPTION                PacketType = 4
	PacketType_UNSUBSCRIPTION              PacketType = 5
	PacketType_GET                         PacketType = 6
	PacketType_MESSAGES                    PacketType = 7
	PacketType_CLIENTACK                   PacketType = 8
	// management part
	PacketType_SHUTDOWN PacketType = 9
	// integration
	PacketType_DUMP           PacketType = 10
	PacketType_HEARTBEAT      PacketType = 11
	PacketType_CLIENTROLLBACK PacketType = 12
)

// Enum value maps for PacketType.
var (
	PacketType_name = map[int32]string{
		0:  "PACKAGETYPECOMPATIBLEPROTO2",
		1:  "HANDSHAKE",
		2:  "CLIENTAUTHENTICATION",
		3:  "ACK",
		4:  "SUBSCRIPTION",
		5:  "UNSUBSCRIPTION",
		6:  "GET",
		7:  "MESSAGES",
		8:  "CLIENTACK",
		9:  "SHUTDOWN",
		10: "DUMP",
		11: "HEARTBEAT",
		12: "CLIENTROLLBACK",
	}
	PacketType_value = map[string]int32{
		"PACKAGETYPECOMPATIBLEPROTO2": 0,
		"HANDSHAKE":                   1,
		"CLIENTAUTHENTICATION":        2,
		"ACK":                         3,
		"SUBSCRIPTION":                4,
		"UNSUBSCRIPTION":              5,
		"GET":                         6,
		"MESSAGES":                    7,
		"CLIENTACK":                   8,
		"SHUTDOWN":                    9,
		"DUMP":                        10,
		"HEARTBEAT":                   11,
		"CLIENTROLLBACK":              12,
	}
)

func (x PacketType) Enum() *PacketType {
	p := new(PacketType)
	*p = x
	return p
}

func (x PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_canal_protocol_proto_enumTypes[1].Descriptor()
}

func (PacketType) Type() protoreflect.EnumType {
	return &file_proto_canal_protocol_proto_enumTypes[1]
}

func (x PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketType.Descriptor instead.
func (PacketType) EnumDescriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{1}
}

type Packet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [default = 17];
	//
	// Types that are valid to be assigned to MagicNumberPresent:
	//
	//	*Packet_MagicNumber
	MagicNumberPresent isPacket_MagicNumberPresent `protobuf_oneof:"magic_number_present"`
	// [default = 1];
	//
	// Types that are valid to be assigned to VersionPresent:
	//
	//	*Packet_Version
	VersionPresent isPacket_VersionPresent `protobuf_oneof:"version_present"`
	Type           PacketType              `protobuf:"varint,3,opt,name=type,proto3,enum=com.alibaba.otter.canal.protocol.canal.PacketType" json:"type,omitempty"`
	// [default = NONE];
	//
	// Types that are valid to be assigned to CompressionPresent:
	//
	//	*Packet_Compression
	CompressionPresent isPacket_CompressionPresent `protobuf_oneof:"compression_present"`
	Body               []byte                      `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_proto_canal_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetMagicNumberPresent() isPacket_MagicNumberPresent {
	if x != nil {
		return x.MagicNumberPresent
	}
	return nil
}

func (x *Packet) GetMagicNumber() int32 {
	if x != nil {
		if x, ok := x.MagicNumberPresent.(*Packet_MagicNumber); ok {
			return x.MagicNumber
		}
	}
	return 0
}

func (x *Packet) GetVersionPresent() isPacket_VersionPresent {
	if x != nil {
		return x.VersionPresent
	}
	return nil
}

func (x *Packet) GetVersion() int32 {
	if x != nil {
		if x, ok := x.VersionPresent.(*Packet_Version); ok {
			return x.Version
		}
	}
	return 0
}

func (x *Packet) GetType() PacketType {
	if x != nil {
		return x.Type
	}
	return PacketType_PACKAGETYPECOMPATIBLEPROTO2
}

func (x *Packet) GetCompressionPresent() isPacket_CompressionPresent {
	if x != nil {
		return x.CompressionPresent
	}
	return nil
}

func (x *Packet) GetCompression() Compression {
	if x != nil {
		if x, ok := x.CompressionPresent.(*Packet_Compression); ok {
			return x.Compression
		}
	}
	return Compression_COMPRESSIONCOMPATIBLEPROTO2
}

func (x *Packet) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type isPacket_MagicNumberPresent interface {
	isPacket_MagicNumberPresent()
}

type Packet_MagicNumber struct {
	MagicNumber int32 `protobuf:"varint,1,opt,name=magic_number,json=magicNumber,proto3,oneof"`
}

func (*Packet_MagicNumber) isPacket_MagicNumberPresent() {}

type isPacket_VersionPresent interface {
	isPacket_VersionPresent()
}

type Packet_Version struct {
	Version int32 `protobuf:"varint,2,opt,name=version,proto3,oneof"`
}

func (*Packet_Version) isPacket_VersionPresent() {}

type isPacket_CompressionPresent interface {
	isPacket_CompressionPresent()
}

type Packet_Compression struct {
	Compression Compression `protobuf:"varint,4,opt,name=compression,proto3,enum=com.alibaba.otter.canal.protocol.canal.Compression,oneof"`
}

func (*Packet_Compression) isPacket_CompressionPresent() {}

type HeartBeat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SendTimestamp  int64                  `protobuf:"varint,1,opt,name=send_timestamp,json=sendTimestamp,proto3" json:"send_timestamp,omitempty"`
	StartTimestamp int64                  `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	mi := &file_proto_canal_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *HeartBeat) GetSendTimestamp() int64 {
	if x != nil {
		return x.SendTimestamp
	}
	return 0
}

func (x *HeartBeat) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

type Handshake struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	//	[default = "utf8"];
	//
	// Types that are valid to be assigned to CommunicationEncodingPresent:
	//
	//	*Handshake_CommunicationEncoding
	CommunicationEncodingPresent isHandshake_CommunicationEncodingPresent `protobuf_oneof:"communication_encoding_present"`
	Seeds                        []byte                                   `protobuf:"bytes,2,opt,name=seeds,proto3" json:"seeds,omitempty"`
	SupportedCompressions        Compression                              `protobuf:"varint,3,opt,name=supported_compressions,json=supportedCompressions,proto3,enum=com.alibaba.otter.canal.protocol.canal.Compression" json:"supported_compressions,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Handshake) Reset() {
	*x = Handshake{}
	mi := &file_proto_canal_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake) ProtoMessage() {}

func (x *Handshake) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake.ProtoReflect.Descriptor instead.
func (*Handshake) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *Handshake) GetCommunicationEncodingPresent() isHandshake_CommunicationEncodingPresent {
	if x != nil {
		return x.CommunicationEncodingPresent
	}
	return nil
}

func (x *Handshake) GetCommunicationEncoding() string {
	if x != nil {
		if x, ok := x.CommunicationEncodingPresent.(*Handshake_CommunicationEncoding); ok {
			return x.CommunicationEncoding
		}
	}
	return ""
}

func (x *Handshake) GetSeeds() []byte {
	if x != nil {
		return x.Seeds
	}
	return nil
}

func (x *Handshake) GetSupportedCompressions() Compression {
	if x != nil {
		return x.SupportedCompressions
	}
	return Compression_COMPRESSIONCOMPATIBLEPROTO2
}

type isHandshake_CommunicationEncodingPresent interface {
	isHandshake_CommunicationEncodingPresent()
}

type Handshake_CommunicationEncoding struct {
	CommunicationEncoding string `protobuf:"bytes,1,opt,name=communication_encoding,json=communicationEncoding,proto3,oneof"`
}

func (*Handshake_CommunicationEncoding) isHandshake_CommunicationEncodingPresent() {}

// client authentication
type ClientAuth struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Username string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password []byte                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // hashed password with seeds from Handshake message
	// [default = 0]
	//
	// Types that are valid to be assigned to NetReadTimeoutPresent:
	//
	//	*ClientAuth_NetReadTimeout
	NetReadTimeoutPresent isClientAuth_NetReadTimeoutPresent `protobuf_oneof:"net_read_timeout_present"`
	// [default = 0];
	//
	// Types that are valid to be assigned to NetWriteTimeoutPresent:
	//
	//	*ClientAuth_NetWriteTimeout
	NetWriteTimeoutPresent isClientAuth_NetWriteTimeoutPresent `protobuf_oneof:"net_write_timeout_present"`
	Destination            string                              `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId               string                              `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Filter                 string                              `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	StartTimestamp         int64                               `protobuf:"varint,8,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ClientAuth) Reset() {
	*x = ClientAuth{}
	mi := &file_proto_canal_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAuth) ProtoMessage() {}

func (x *ClientAuth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAuth.ProtoReflect.Descriptor instead.
func (*ClientAuth) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *ClientAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClientAuth) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *ClientAuth) GetNetReadTimeoutPresent() isClientAuth_NetReadTimeoutPresent {
	if x != nil {
		return x.NetReadTimeoutPresent
	}
	return nil
}

func (x *ClientAuth) GetNetReadTimeout() int32 {
	if x != nil {
		if x, ok := x.NetReadTimeoutPresent.(*ClientAuth_NetReadTimeout); ok {
			return x.NetReadTimeout
		}
	}
	return 0
}

func (x *ClientAuth) GetNetWriteTimeoutPresent() isClientAuth_NetWriteTimeoutPresent {
	if x != nil {
		return x.NetWriteTimeoutPresent
	}
	return nil
}

func (x *ClientAuth) GetNetWriteTimeout() int32 {
	if x != nil {
		if x, ok := x.NetWriteTimeoutPresent.(*ClientAuth_NetWriteTimeout); ok {
			return x.NetWriteTimeout
		}
	}
	return 0
}

func (x *ClientAuth) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ClientAuth) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientAuth) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ClientAuth) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

type isClientAuth_NetReadTimeoutPresent interface {
	isClientAuth_NetReadTimeoutPresent()
}

type ClientAuth_NetReadTimeout struct {
	NetReadTimeout int32 `protobuf:"varint,3,opt,name=net_read_timeout,json=netReadTimeout,proto3,oneof"` // in seconds
}

func (*ClientAuth_NetReadTimeout) isClientAuth_NetReadTimeoutPresent() {}

type isClientAuth_NetWriteTimeoutPresent interface {
	isClientAuth_NetWriteTimeoutPresent()
}

type ClientAuth_NetWriteTimeout struct {
	NetWriteTimeout int32 `protobuf:"varint,4,opt,name=net_write_timeout,json=netWriteTimeout,proto3,oneof"` // in seconds
}

func (*ClientAuth_NetWriteTimeout) isClientAuth_NetWriteTimeoutPresent() {}

type Ack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [default = 0]
	//
	// Types that are valid to be assigned to ErrorCodePresent:
	//
	//	*Ack_ErrorCode
	ErrorCodePresent isAck_ErrorCodePresent `protobuf_oneof:"error_code_present"`
	ErrorMessage     string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // if something like compression is not supported, erorr_message will tell about it.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_canal_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *Ack) GetErrorCodePresent() isAck_ErrorCodePresent {
	if x != nil {
		return x.ErrorCodePresent
	}
	return nil
}

func (x *Ack) GetErrorCode() int32 {
	if x != nil {
		if x, ok := x.ErrorCodePresent.(*Ack_ErrorCode); ok {
			return x.ErrorCode
		}
	}
	return 0
}

func (x *Ack) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type isAck_ErrorCodePresent interface {
	isAck_ErrorCodePresent()
}

type Ack_ErrorCode struct {
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,oneof"`
}

func (*Ack_ErrorCode) isAck_ErrorCodePresent() {}

type ClientAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	BatchId       int64                  `protobuf:"varint,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientAck) Reset() {
	*x = ClientAck{}
	mi := &file_proto_canal_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAck) ProtoMessage() {}

func (x *ClientAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAck.ProtoReflect.Descriptor instead.
func (*ClientAck) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *ClientAck) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ClientAck) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientAck) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// subscription
type Sub struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Filter        string                 `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sub) Reset() {
	*x = Sub{}
	mi := &file_proto_canal_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sub) ProtoMessage() {}

func (x *Sub) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sub.ProtoReflect.Descriptor instead.
func (*Sub) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *Sub) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Sub) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Sub) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Unsubscription
type Unsub struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Filter        string                 `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unsub) Reset() {
	*x = Unsub{}
	mi := &file_proto_canal_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsub) ProtoMessage() {}

func (x *Unsub) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsub.ProtoReflect.Descriptor instead.
func (*Unsub) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Unsub) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Unsub) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Unsub) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// PullRequest
type Get struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Destination string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId    string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	FetchSize   int32                  `protobuf:"varint,3,opt,name=fetch_size,json=fetchSize,proto3" json:"fetch_size,omitempty"`
	// [default = -1]
	//
	// Types that are valid to be assigned to TimeoutPresent:
	//
	//	*Get_Timeout
	TimeoutPresent isGet_TimeoutPresent `protobuf_oneof:"timeout_present"`
	// [default = 2]
	//
	// Types that are valid to be assigned to UnitPresent:
	//
	//	*Get_Unit
	UnitPresent isGet_UnitPresent `protobuf_oneof:"unit_present"`
	// [default = false]
	//
	// Types that are valid to be assigned to AutoAckPresent:
	//
	//	*Get_AutoAck
	AutoAckPresent isGet_AutoAckPresent `protobuf_oneof:"auto_ack_present"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Get) Reset() {
	*x = Get{}
	mi := &file_proto_canal_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Get) ProtoMessage() {}

func (x *Get) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Get.ProtoReflect.Descriptor instead.
func (*Get) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *Get) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Get) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Get) GetFetchSize() int32 {
	if x != nil {
		return x.FetchSize
	}
	return 0
}

func (x *Get) GetTimeoutPresent() isGet_TimeoutPresent {
	if x != nil {
		return x.TimeoutPresent
	}
	return nil
}

func (x *Get) GetTimeout() int64 {
	if x != nil {
		if x, ok := x.TimeoutPresent.(*Get_Timeout); ok {
			return x.Timeout
		}
	}
	return 0
}

func (x *Get) GetUnitPresent() isGet_UnitPresent {
	if x != nil {
		return x.UnitPresent
	}
	return nil
}

func (x *Get) GetUnit() int32 {
	if x != nil {
		if x, ok := x.UnitPresent.(*Get_Unit); ok {
			return x.Unit
		}
	}
	return 0
}

func (x *Get) GetAutoAckPresent() isGet_AutoAckPresent {
	if x != nil {
		return x.AutoAckPresent
	}
	return nil
}

func (x *Get) GetAutoAck() bool {
	if x != nil {
		if x, ok := x.AutoAckPresent.(*Get_AutoAck); ok {
			return x.AutoAck
		}
	}
	return false
}

type isGet_TimeoutPresent interface {
	isGet_TimeoutPresent()
}

type Get_Timeout struct {
	Timeout int64 `protobuf:"varint,4,opt,name=timeout,proto3,oneof"` // 默认-1时代表不控制
}

func (*Get_Timeout) isGet_TimeoutPresent() {}

type isGet_UnitPresent interface {
	isGet_UnitPresent()
}

type Get_Unit struct {
	Unit int32 `protobuf:"varint,5,opt,name=unit,proto3,oneof"` // 数字类型，0:纳秒,1:微秒,2:毫秒,3:秒,4:分钟,5:小时,6:天
}

func (*Get_Unit) isGet_UnitPresent() {}

type isGet_AutoAckPresent interface {
	isGet_AutoAckPresent()
}

type Get_AutoAck struct {
	AutoAck bool `protobuf:"varint,6,opt,name=auto_ack,json=autoAck,proto3,oneof"` // 是否自动ack
}

func (*Get_AutoAck) isGet_AutoAckPresent() {}

type Messages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       int64                  `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Messages      [][]byte               `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Messages) Reset() {
	*x = Messages{}
	mi := &file_proto_canal_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messages) ProtoMessage() {}

func (x *Messages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messages.ProtoReflect.Descriptor instead.
func (*Messages) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *Messages) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *Messages) GetMessages() [][]byte {
	if x != nil {
		return x.Messages
	}
	return nil
}

// TBD when new packets are required
type Dump struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Journal  string                 `protobuf:"bytes,1,opt,name=journal,proto3" json:"journal,omitempty"`
	Position int64                  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// [default = 0]
	//
	// Types that are valid to be assigned to TimestampPresent:
	//
	//	*Dump_Timestamp
	TimestampPresent isDump_TimestampPresent `protobuf_oneof:"timestamp_present"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Dump) Reset() {
	*x = Dump{}
	mi := &file_proto_canal_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dump) ProtoMessage() {}

func (x *Dump) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dump.ProtoReflect.Descriptor instead.
func (*Dump) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *Dump) GetJournal() string {
	if x != nil {
		return x.Journal
	}
	return ""
}

func (x *Dump) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Dump) GetTimestampPresent() isDump_TimestampPresent {
	if x != nil {
		return x.TimestampPresent
	}
	return nil
}

func (x *Dump) GetTimestamp() int64 {
	if x != nil {
		if x, ok := x.TimestampPresent.(*Dump_Timestamp); ok {
			return x.Timestamp
		}
	}
	return 0
}

type isDump_TimestampPresent interface {
	isDump_TimestampPresent()
}

type Dump_Timestamp struct {
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3,oneof"`
}

func (*Dump_Timestamp) isDump_TimestampPresent() {}

type ClientRollback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	BatchId       int64                  `protobuf:"varint,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientRollback) Reset() {
	*x = ClientRollback{}
	mi := &file_proto_canal_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRollback) ProtoMessage() {}

func (x *ClientRollback) ProtoReflect() protoreflect.Message {
	mi := &file_proto_canal_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRollback.ProtoReflect.Descriptor instead.
func (*ClientRollback) Descriptor() ([]byte, []int) {
	return file_proto_canal_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *ClientRollback) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ClientRollback) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientRollback) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

var File_proto_canal_protocol_proto protoreflect.FileDescriptor

const file_proto_canal_protocol_proto_rawDesc = "" +
	"\n" +
	"\x1aproto/canal_protocol.proto\x12&com.alibaba.otter.canal.protocol.canal\"\xc0\x02\n" +
	"\x06Packet\x12#\n" +
	"\fmagic_number\x18\x01 \x01(\x05H\x00R\vmagicNumber\x12\x1a\n" +
	"\aversion\x18\x02 \x01(\x05H\x01R\aversion\x12F\n" +
	"\x04type\x18\x03 \x01(\x0e22.com.alibaba.otter.canal.protocol.canal.PacketTypeR\x04type\x12W\n" +
	"\vcompression\x18\x04 \x01(\x0e23.com.alibaba.otter.canal.protocol.canal.CompressionH\x02R\vcompression\x12\x12\n" +
	"\x04body\x18\x05 \x01(\fR\x04bodyB\x16\n" +
	"\x14magic_number_presentB\x11\n" +
	"\x0fversion_presentB\x15\n" +
	"\x13compression_present\"[\n" +
	"\tHeartBeat\x12%\n" +
	"\x0esend_timestamp\x18\x01 \x01(\x03R\rsendTimestamp\x12'\n" +
	"\x0fstart_timestamp\x18\x02 \x01(\x03R\x0estartTimestamp\"\xe8\x01\n" +
	"\tHandshake\x127\n" +
	"\x16communication_encoding\x18\x01 \x01(\tH\x00R\x15communicationEncoding\x12\x14\n" +
	"\x05seeds\x18\x02 \x01(\fR\x05seeds\x12j\n" +
	"\x16supported_compressions\x18\x03 \x01(\x0e23.com.alibaba.otter.canal.protocol.canal.CompressionR\x15supportedCompressionsB \n" +
	"\x1ecommunication_encoding_present\"\xd7\x02\n" +
	"\n" +
	"ClientAuth\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\fR\bpassword\x12*\n" +
	"\x10net_read_timeout\x18\x03 \x01(\x05H\x00R\x0enetReadTimeout\x12,\n" +
	"\x11net_write_timeout\x18\x04 \x01(\x05H\x01R\x0fnetWriteTimeout\x12 \n" +
	"\vdestination\x18\x05 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x06 \x01(\tR\bclientId\x12\x16\n" +
	"\x06filter\x18\a \x01(\tR\x06filter\x12'\n" +
	"\x0fstart_timestamp\x18\b \x01(\x03R\x0estartTimestampB\x1a\n" +
	"\x18net_read_timeout_presentB\x1b\n" +
	"\x19net_write_timeout_present\"a\n" +
	"\x03Ack\x12\x1f\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x05H\x00R\terrorCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessageB\x14\n" +
	"\x12error_code_present\"e\n" +
	"\tClientAck\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x19\n" +
	"\bbatch_id\x18\x03 \x01(\x03R\abatchId\"\\\n" +
	"\x03Sub\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x16\n" +
	"\x06filter\x18\a \x01(\tR\x06filter\"^\n" +
	"\x05Unsub\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x16\n" +
	"\x06filter\x18\a \x01(\tR\x06filter\"\xe9\x01\n" +
	"\x03Get\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x1d\n" +
	"\n" +
	"fetch_size\x18\x03 \x01(\x05R\tfetchSize\x12\x1a\n" +
	"\atimeout\x18\x04 \x01(\x03H\x00R\atimeout\x12\x14\n" +
	"\x04unit\x18\x05 \x01(\x05H\x01R\x04unit\x12\x1b\n" +
	"\bauto_ack\x18\x06 \x01(\bH\x02R\aautoAckB\x11\n" +
	"\x0ftimeout_presentB\x0e\n" +
	"\funit_presentB\x12\n" +
	"\x10auto_ack_present\"A\n" +
	"\bMessages\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\x03R\abatchId\x12\x1a\n" +
	"\bmessages\x18\x02 \x03(\fR\bmessages\"q\n" +
	"\x04Dump\x12\x18\n" +
	"\ajournal\x18\x01 \x01(\tR\ajournal\x12\x1a\n" +
	"\bposition\x18\x02 \x01(\x03R\bposition\x12\x1e\n" +
	"\ttimestamp\x18\x03 \x01(\x03H\x00R\ttimestampB\x13\n" +
	"\x11timestamp_present\"j\n" +
	"\x0eClientRollback\x12 \n" +
	"\vdestination\x18\x01 \x01(\tR\vdestination\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x19\n" +
	"\bbatch_id\x18\x03 \x01(\x03R\abatchId*U\n" +
	"\vCompression\x12\x1f\n" +
	"\x1bCOMPRESSIONCOMPATIBLEPROTO2\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\b\n" +
	"\x04ZLIB\x10\x02\x12\b\n" +
	"\x04GZIP\x10\x03\x12\a\n" +
	"\x03LZF\x10\x04*\xe6\x01\n" +
	"\n" +
	"PacketType\x12\x1f\n" +
	"\x1bPACKAGETYPECOMPATIBLEPROTO2\x10\x00\x12\r\n" +
	"\tHANDSHAKE\x10\x01\x12\x18\n" +
	"\x14CLIENTAUTHENTICATION\x10\x02\x12\a\n" +
	"\x03ACK\x10\x03\x12\x10\n" +
	"\fSUBSCRIPTION\x10\x04\x12\x12\n" +
	"\x0eUNSUBSCRIPTION\x10\x05\x12\a\n" +
	"\x03GET\x10\x06\x12\f\n" +
	"\bMESSAGES\x10\a\x12\r\n" +
	"\tCLIENTACK\x10\b\x12\f\n" +
	"\bSHUTDOWN\x10\t\x12\b\n" +
	"\x04DUMP\x10\n" +
	"\x12\r\n" +
	"\tHEARTBEAT\x10\v\x12\x12\n" +
	"\x0eCLIENTROLLBACK\x10\fBI\n" +
	" com.alibaba.otter.canal.protocolB\vCanalPacketH\x01Z\x16./protocol/canal;canalb\x06proto3"

var (
	file_proto_canal_protocol_proto_rawDescOnce sync.Once
	file_proto_canal_protocol_proto_rawDescData []byte
)

func file_proto_canal_protocol_proto_rawDescGZIP() []byte {
	file_proto_canal_protocol_proto_rawDescOnce.Do(func() {
		file_proto_canal_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_canal_protocol_proto_rawDesc), len(file_proto_canal_protocol_proto_rawDesc)))
	})
	return file_proto_canal_protocol_proto_rawDescData
}

var file_proto_canal_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_canal_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_canal_protocol_proto_goTypes = []any{
	(Compression)(0),       // 0: com.alibaba.otter.canal.protocol.canal.Compression
	(PacketType)(0),        // 1: com.alibaba.otter.canal.protocol.canal.PacketType
	(*Packet)(nil),         // 2: com.alibaba.otter.canal.protocol.canal.Packet
	(*HeartBeat)(nil),      // 3: com.alibaba.otter.canal.protocol.canal.HeartBeat
	(*Handshake)(nil),      // 4: com.alibaba.otter.canal.protocol.canal.Handshake
	(*ClientAuth)(nil),     // 5: com.alibaba.otter.canal.protocol.canal.ClientAuth
	(*Ack)(nil),            // 6: com.alibaba.otter.canal.protocol.canal.Ack
	(*ClientAck)(nil),      // 7: com.alibaba.otter.canal.protocol.canal.ClientAck
	(*Sub)(nil),            // 8: com.alibaba.otter.canal.protocol.canal.Sub
	(*Unsub)(nil),          // 9: com.alibaba.otter.canal.protocol.canal.Unsub
	(*Get)(nil),            // 10: com.alibaba.otter.canal.protocol.canal.Get
	(*Messages)(nil),       // 11: com.alibaba.otter.canal.protocol.canal.Messages
	(*Dump)(nil),           // 12: com.alibaba.otter.canal.protocol.canal.Dump
	(*ClientRollback)(nil), // 13: com.alibaba.otter.canal.protocol.canal.ClientRollback
}
var file_proto_canal_protocol_proto_depIdxs = []int32{
	1, // 0: com.alibaba.otter.canal.protocol.canal.Packet.type:type_name -> com.alibaba.otter.canal.protocol.canal.PacketType
	0, // 1: com.alibaba.otter.canal.protocol.canal.Packet.compression:type_name -> com.alibaba.otter.canal.protocol.canal.Compression
	0, // 2: com.alibaba.otter.canal.protocol.canal.Handshake.supported_compressions:type_name -> com.alibaba.otter.canal.protocol.canal.Compression
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_canal_protocol_proto_init() }
func file_proto_canal_protocol_proto_init() {
	if File_proto_canal_protocol_proto != nil {
		return
	}
	file_proto_canal_protocol_proto_msgTypes[0].OneofWrappers = []any{
		(*Packet_MagicNumber)(nil),
		(*Packet_Version)(nil),
		(*Packet_Compression)(nil),
	}
	file_proto_canal_protocol_proto_msgTypes[2].OneofWrappers = []any{
		(*Handshake_CommunicationEncoding)(nil),
	}
	file_proto_canal_protocol_proto_msgTypes[3].OneofWrappers = []any{
		(*ClientAuth_NetReadTimeout)(nil),
		(*ClientAuth_NetWriteTimeout)(nil),
	}
	file_proto_canal_protocol_proto_msgTypes[4].OneofWrappers = []any{
		(*Ack_ErrorCode)(nil),
	}
	file_proto_canal_protocol_proto_msgTypes[8].OneofWrappers = []any{
		(*Get_Timeout)(nil),
		(*Get_Unit)(nil),
		(*Get_AutoAck)(nil),
	}
	file_proto_canal_protocol_proto_msgTypes[10].OneofWrappers = []any{
		(*Dump_Timestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_canal_protocol_proto_rawDesc), len(file_proto_canal_protocol_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_canal_protocol_proto_goTypes,
		DependencyIndexes: file_proto_canal_protocol_proto_depIdxs,
		EnumInfos:         file_proto_canal_protocol_proto_enumTypes,
		MessageInfos:      file_proto_canal_protocol_proto_msgTypes,
	}.Build()
	File_proto_canal_protocol_proto = out.File
	file_proto_canal_protocol_proto_goTypes = nil
	file_proto_canal_protocol_proto_depIdxs = nil
}
