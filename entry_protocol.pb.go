// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/entry_protocol.proto

package icanal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *打散后的事件类型，主要用于标识事务的开始，变更数据，结束*
type EntryType int32

const (
	EntryType_ENTRYTYPECOMPATIBLEPROTO2 EntryType = 0
	EntryType_TRANSACTIONBEGIN          EntryType = 1
	EntryType_ROWDATA                   EntryType = 2
	EntryType_TRANSACTIONEND            EntryType = 3
	// * 心跳类型，内部使用，外部暂不可见，可忽略 *
	EntryType_HEARTBEAT EntryType = 4
	EntryType_GTIDLOG   EntryType = 5
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0: "ENTRYTYPECOMPATIBLEPROTO2",
		1: "TRANSACTIONBEGIN",
		2: "ROWDATA",
		3: "TRANSACTIONEND",
		4: "HEARTBEAT",
		5: "GTIDLOG",
	}
	EntryType_value = map[string]int32{
		"ENTRYTYPECOMPATIBLEPROTO2": 0,
		"TRANSACTIONBEGIN":          1,
		"ROWDATA":                   2,
		"TRANSACTIONEND":            3,
		"HEARTBEAT":                 4,
		"GTIDLOG":                   5,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_entry_protocol_proto_enumTypes[0].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_proto_entry_protocol_proto_enumTypes[0]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{0}
}

// * 事件类型 *
type EventType int32

const (
	EventType_EVENTTYPECOMPATIBLEPROTO2 EventType = 0
	EventType_INSERT                    EventType = 1
	EventType_UPDATE                    EventType = 2
	EventType_DELETE                    EventType = 3
	EventType_CREATE                    EventType = 4
	EventType_ALTER                     EventType = 5
	EventType_ERASE                     EventType = 6
	EventType_QUERY                     EventType = 7
	EventType_TRUNCATE                  EventType = 8
	EventType_RENAME                    EventType = 9
	// *CREATE INDEX*
	EventType_CINDEX EventType = 10
	EventType_DINDEX EventType = 11
	EventType_GTID   EventType = 12
	// * XA *
	EventType_XACOMMIT   EventType = 13
	EventType_XAROLLBACK EventType = 14
	// * MASTER HEARTBEAT *
	EventType_MHEARTBEAT EventType = 15
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENTTYPECOMPATIBLEPROTO2",
		1:  "INSERT",
		2:  "UPDATE",
		3:  "DELETE",
		4:  "CREATE",
		5:  "ALTER",
		6:  "ERASE",
		7:  "QUERY",
		8:  "TRUNCATE",
		9:  "RENAME",
		10: "CINDEX",
		11: "DINDEX",
		12: "GTID",
		13: "XACOMMIT",
		14: "XAROLLBACK",
		15: "MHEARTBEAT",
	}
	EventType_value = map[string]int32{
		"EVENTTYPECOMPATIBLEPROTO2": 0,
		"INSERT":                    1,
		"UPDATE":                    2,
		"DELETE":                    3,
		"CREATE":                    4,
		"ALTER":                     5,
		"ERASE":                     6,
		"QUERY":                     7,
		"TRUNCATE":                  8,
		"RENAME":                    9,
		"CINDEX":                    10,
		"DINDEX":                    11,
		"GTID":                      12,
		"XACOMMIT":                  13,
		"XAROLLBACK":                14,
		"MHEARTBEAT":                15,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_entry_protocol_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_proto_entry_protocol_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{1}
}

// *数据库类型*
type Type int32

const (
	Type_TYPECOMPATIBLEPROTO2 Type = 0
	Type_ORACLE               Type = 1
	Type_MYSQL                Type = 2
	Type_PGSQL                Type = 3
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPECOMPATIBLEPROTO2",
		1: "ORACLE",
		2: "MYSQL",
		3: "PGSQL",
	}
	Type_value = map[string]int32{
		"TYPECOMPATIBLEPROTO2": 0,
		"ORACLE":               1,
		"MYSQL":                2,
		"PGSQL":                3,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_entry_protocol_proto_enumTypes[2].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_proto_entry_protocol_proto_enumTypes[2]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{2}
}

// ***************************************************************
// message model
// 如果要在Enum中新增类型，确保以前的类型的下标值不变.
// **************************************************************
type Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *协议头部信息*
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// /**打散后的事件类型**/ [default = ROWDATA]
	//
	// Types that are valid to be assigned to EntryTypePresent:
	//
	//	*Entry_EntryType
	EntryTypePresent isEntry_EntryTypePresent `protobuf_oneof:"entryType_present"`
	// *传输的二进制数组*
	StoreValue    []byte `protobuf:"bytes,3,opt,name=storeValue,proto3" json:"storeValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_proto_entry_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Entry) GetEntryTypePresent() isEntry_EntryTypePresent {
	if x != nil {
		return x.EntryTypePresent
	}
	return nil
}

func (x *Entry) GetEntryType() EntryType {
	if x != nil {
		if x, ok := x.EntryTypePresent.(*Entry_EntryType); ok {
			return x.EntryType
		}
	}
	return EntryType_ENTRYTYPECOMPATIBLEPROTO2
}

func (x *Entry) GetStoreValue() []byte {
	if x != nil {
		return x.StoreValue
	}
	return nil
}

type isEntry_EntryTypePresent interface {
	isEntry_EntryTypePresent()
}

type Entry_EntryType struct {
	EntryType EntryType `protobuf:"varint,2,opt,name=entryType,proto3,enum=com.alibaba.otter.canal.protocol.EntryType,oneof"`
}

func (*Entry_EntryType) isEntry_EntryTypePresent() {}

// *message Header*
type Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [default = 1]
	//
	// Types that are valid to be assigned to VersionPresent:
	//
	//	*Header_Version
	VersionPresent isHeader_VersionPresent `protobuf_oneof:"version_present"`
	// *binlog/redolog 文件名*
	LogfileName string `protobuf:"bytes,2,opt,name=logfileName,proto3" json:"logfileName,omitempty"`
	// *binlog/redolog 文件的偏移位置*
	LogfileOffset int64 `protobuf:"varint,3,opt,name=logfileOffset,proto3" json:"logfileOffset,omitempty"`
	// *服务端serverId*
	ServerId int64 `protobuf:"varint,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	// * 变更数据的编码 *
	ServerenCode string `protobuf:"bytes,5,opt,name=serverenCode,proto3" json:"serverenCode,omitempty"`
	// *变更数据的执行时间 *
	ExecuteTime int64 `protobuf:"varint,6,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// [default = MYSQL]
	//
	// Types that are valid to be assigned to SourceTypePresent:
	//
	//	*Header_SourceType
	SourceTypePresent isHeader_SourceTypePresent `protobuf_oneof:"sourceType_present"`
	// * 变更数据的schemaname*
	SchemaName string `protobuf:"bytes,8,opt,name=schemaName,proto3" json:"schemaName,omitempty"`
	// *变更数据的tablename*
	TableName string `protobuf:"bytes,9,opt,name=tableName,proto3" json:"tableName,omitempty"`
	// *每个event的长度*
	EventLength int64 `protobuf:"varint,10,opt,name=eventLength,proto3" json:"eventLength,omitempty"`
	// [default = UPDATE]
	//
	// Types that are valid to be assigned to EventTypePresent:
	//
	//	*Header_EventType
	EventTypePresent isHeader_EventTypePresent `protobuf_oneof:"eventType_present"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,12,rep,name=props,proto3" json:"props,omitempty"`
	// *当前事务的gitd*
	Gtid          string `protobuf:"bytes,13,opt,name=gtid,proto3" json:"gtid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_proto_entry_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetVersionPresent() isHeader_VersionPresent {
	if x != nil {
		return x.VersionPresent
	}
	return nil
}

func (x *Header) GetVersion() int32 {
	if x != nil {
		if x, ok := x.VersionPresent.(*Header_Version); ok {
			return x.Version
		}
	}
	return 0
}

func (x *Header) GetLogfileName() string {
	if x != nil {
		return x.LogfileName
	}
	return ""
}

func (x *Header) GetLogfileOffset() int64 {
	if x != nil {
		return x.LogfileOffset
	}
	return 0
}

func (x *Header) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *Header) GetServerenCode() string {
	if x != nil {
		return x.ServerenCode
	}
	return ""
}

func (x *Header) GetExecuteTime() int64 {
	if x != nil {
		return x.ExecuteTime
	}
	return 0
}

func (x *Header) GetSourceTypePresent() isHeader_SourceTypePresent {
	if x != nil {
		return x.SourceTypePresent
	}
	return nil
}

func (x *Header) GetSourceType() Type {
	if x != nil {
		if x, ok := x.SourceTypePresent.(*Header_SourceType); ok {
			return x.SourceType
		}
	}
	return Type_TYPECOMPATIBLEPROTO2
}

func (x *Header) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *Header) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Header) GetEventLength() int64 {
	if x != nil {
		return x.EventLength
	}
	return 0
}

func (x *Header) GetEventTypePresent() isHeader_EventTypePresent {
	if x != nil {
		return x.EventTypePresent
	}
	return nil
}

func (x *Header) GetEventType() EventType {
	if x != nil {
		if x, ok := x.EventTypePresent.(*Header_EventType); ok {
			return x.EventType
		}
	}
	return EventType_EVENTTYPECOMPATIBLEPROTO2
}

func (x *Header) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Header) GetGtid() string {
	if x != nil {
		return x.Gtid
	}
	return ""
}

type isHeader_VersionPresent interface {
	isHeader_VersionPresent()
}

type Header_Version struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3,oneof"`
}

func (*Header_Version) isHeader_VersionPresent() {}

type isHeader_SourceTypePresent interface {
	isHeader_SourceTypePresent()
}

type Header_SourceType struct {
	SourceType Type `protobuf:"varint,7,opt,name=sourceType,proto3,enum=com.alibaba.otter.canal.protocol.Type,oneof"`
}

func (*Header_SourceType) isHeader_SourceTypePresent() {}

type isHeader_EventTypePresent interface {
	isHeader_EventTypePresent()
}

type Header_EventType struct {
	EventType EventType `protobuf:"varint,11,opt,name=eventType,proto3,enum=com.alibaba.otter.canal.protocol.EventType,oneof"`
}

func (*Header_EventType) isHeader_EventTypePresent() {}

// *每个字段的数据结构*
type Column struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *字段下标*
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// *字段java中类型*
	SqlType int32 `protobuf:"varint,2,opt,name=sqlType,proto3" json:"sqlType,omitempty"`
	// *字段名称(忽略大小写)，在mysql中是没有的*
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// *是否是主键*
	IsKey bool `protobuf:"varint,4,opt,name=isKey,proto3" json:"isKey,omitempty"`
	// *如果EventType=UPDATE,用于标识这个字段值是否有修改*
	Updated bool `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	// [default = false]
	//
	// Types that are valid to be assigned to IsNullPresent:
	//
	//	*Column_IsNull
	IsNullPresent isColumn_IsNullPresent `protobuf_oneof:"isNull_present"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,7,rep,name=props,proto3" json:"props,omitempty"`
	// * 字段值,timestamp,Datetime是一个时间格式的文本 *
	Value string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// * 对应数据对象原始长度 *
	Length int32 `protobuf:"varint,9,opt,name=length,proto3" json:"length,omitempty"`
	// *字段mysql类型*
	MysqlType     string `protobuf:"bytes,10,opt,name=mysqlType,proto3" json:"mysqlType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_proto_entry_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Column) GetSqlType() int32 {
	if x != nil {
		return x.SqlType
	}
	return 0
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetIsKey() bool {
	if x != nil {
		return x.IsKey
	}
	return false
}

func (x *Column) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *Column) GetIsNullPresent() isColumn_IsNullPresent {
	if x != nil {
		return x.IsNullPresent
	}
	return nil
}

func (x *Column) GetIsNull() bool {
	if x != nil {
		if x, ok := x.IsNullPresent.(*Column_IsNull); ok {
			return x.IsNull
		}
	}
	return false
}

func (x *Column) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Column) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Column) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Column) GetMysqlType() string {
	if x != nil {
		return x.MysqlType
	}
	return ""
}

type isColumn_IsNullPresent interface {
	isColumn_IsNullPresent()
}

type Column_IsNull struct {
	IsNull bool `protobuf:"varint,6,opt,name=isNull,proto3,oneof"`
}

func (*Column_IsNull) isColumn_IsNullPresent() {}

type RowData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * 字段信息，增量数据(修改前,删除前) *
	BeforeColumns []*Column `protobuf:"bytes,1,rep,name=beforeColumns,proto3" json:"beforeColumns,omitempty"`
	// * 字段信息，增量数据(修改后,新增后)  *
	AfterColumns []*Column `protobuf:"bytes,2,rep,name=afterColumns,proto3" json:"afterColumns,omitempty"`
	// *预留扩展*
	Props         []*Pair `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowData) Reset() {
	*x = RowData{}
	mi := &file_proto_entry_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowData) ProtoMessage() {}

func (x *RowData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowData.ProtoReflect.Descriptor instead.
func (*RowData) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *RowData) GetBeforeColumns() []*Column {
	if x != nil {
		return x.BeforeColumns
	}
	return nil
}

func (x *RowData) GetAfterColumns() []*Column {
	if x != nil {
		return x.AfterColumns
	}
	return nil
}

func (x *RowData) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

// *message row 每行变更数据的数据结构*
type RowChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *tableId,由数据库产生*
	TableId int64 `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	// [default = UPDATE]
	//
	// Types that are valid to be assigned to EventTypePresent:
	//
	//	*RowChange_EventType
	EventTypePresent isRowChange_EventTypePresent `protobuf_oneof:"eventType_present"`
	// [default = false]
	//
	// Types that are valid to be assigned to IsDdlPresent:
	//
	//	*RowChange_IsDdl
	IsDdlPresent isRowChange_IsDdlPresent `protobuf_oneof:"isDdl_present"`
	// * ddl/query的sql语句  *
	Sql string `protobuf:"bytes,11,opt,name=sql,proto3" json:"sql,omitempty"`
	// * 一次数据库变更可能存在多行  *
	RowDatas []*RowData `protobuf:"bytes,12,rep,name=rowDatas,proto3" json:"rowDatas,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,13,rep,name=props,proto3" json:"props,omitempty"`
	// * ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *
	DdlSchemaName string `protobuf:"bytes,14,opt,name=ddlSchemaName,proto3" json:"ddlSchemaName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowChange) Reset() {
	*x = RowChange{}
	mi := &file_proto_entry_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowChange) ProtoMessage() {}

func (x *RowChange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowChange.ProtoReflect.Descriptor instead.
func (*RowChange) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *RowChange) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RowChange) GetEventTypePresent() isRowChange_EventTypePresent {
	if x != nil {
		return x.EventTypePresent
	}
	return nil
}

func (x *RowChange) GetEventType() EventType {
	if x != nil {
		if x, ok := x.EventTypePresent.(*RowChange_EventType); ok {
			return x.EventType
		}
	}
	return EventType_EVENTTYPECOMPATIBLEPROTO2
}

func (x *RowChange) GetIsDdlPresent() isRowChange_IsDdlPresent {
	if x != nil {
		return x.IsDdlPresent
	}
	return nil
}

func (x *RowChange) GetIsDdl() bool {
	if x != nil {
		if x, ok := x.IsDdlPresent.(*RowChange_IsDdl); ok {
			return x.IsDdl
		}
	}
	return false
}

func (x *RowChange) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *RowChange) GetRowDatas() []*RowData {
	if x != nil {
		return x.RowDatas
	}
	return nil
}

func (x *RowChange) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *RowChange) GetDdlSchemaName() string {
	if x != nil {
		return x.DdlSchemaName
	}
	return ""
}

type isRowChange_EventTypePresent interface {
	isRowChange_EventTypePresent()
}

type RowChange_EventType struct {
	EventType EventType `protobuf:"varint,2,opt,name=eventType,proto3,enum=com.alibaba.otter.canal.protocol.EventType,oneof"`
}

func (*RowChange_EventType) isRowChange_EventTypePresent() {}

type isRowChange_IsDdlPresent interface {
	isRowChange_IsDdlPresent()
}

type RowChange_IsDdl struct {
	IsDdl bool `protobuf:"varint,10,opt,name=isDdl,proto3,oneof"`
}

func (*RowChange_IsDdl) isRowChange_IsDdlPresent() {}

// *开始事务的一些信息*
type TransactionBegin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *已废弃，请使用header里的executeTime*
	ExecuteTime int64 `protobuf:"varint,1,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// *已废弃，Begin里不提供事务id*
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// *预留扩展*
	Props []*Pair `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	// *执行的thread Id*
	ThreadId      int64 `protobuf:"varint,4,opt,name=threadId,proto3" json:"threadId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBegin) Reset() {
	*x = TransactionBegin{}
	mi := &file_proto_entry_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBegin) ProtoMessage() {}

func (x *TransactionBegin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBegin.ProtoReflect.Descriptor instead.
func (*TransactionBegin) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionBegin) GetExecuteTime() int64 {
	if x != nil {
		return x.ExecuteTime
	}
	return 0
}

func (x *TransactionBegin) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionBegin) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *TransactionBegin) GetThreadId() int64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

// *结束事务的一些信息*
type TransactionEnd struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *已废弃，请使用header里的executeTime*
	ExecuteTime int64 `protobuf:"varint,1,opt,name=executeTime,proto3" json:"executeTime,omitempty"`
	// *事务号*
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	// *预留扩展*
	Props         []*Pair `protobuf:"bytes,3,rep,name=props,proto3" json:"props,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionEnd) Reset() {
	*x = TransactionEnd{}
	mi := &file_proto_entry_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEnd) ProtoMessage() {}

func (x *TransactionEnd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEnd.ProtoReflect.Descriptor instead.
func (*TransactionEnd) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionEnd) GetExecuteTime() int64 {
	if x != nil {
		return x.ExecuteTime
	}
	return 0
}

func (x *TransactionEnd) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionEnd) GetProps() []*Pair {
	if x != nil {
		return x.Props
	}
	return nil
}

// *预留扩展*
type Pair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pair) Reset() {
	*x = Pair{}
	mi := &file_proto_entry_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_entry_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_proto_entry_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Pair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_entry_protocol_proto protoreflect.FileDescriptor

const file_proto_entry_protocol_proto_rawDesc = "" +
	"\n" +
	"\x1aproto/entry_protocol.proto\x12 com.alibaba.otter.canal.protocol\"\xcb\x01\n" +
	"\x05Entry\x12@\n" +
	"\x06header\x18\x01 \x01(\v2(.com.alibaba.otter.canal.protocol.HeaderR\x06header\x12K\n" +
	"\tentryType\x18\x02 \x01(\x0e2+.com.alibaba.otter.canal.protocol.EntryTypeH\x00R\tentryType\x12\x1e\n" +
	"\n" +
	"storeValue\x18\x03 \x01(\fR\n" +
	"storeValueB\x13\n" +
	"\x11entryType_present\"\xd5\x04\n" +
	"\x06Header\x12\x1a\n" +
	"\aversion\x18\x01 \x01(\x05H\x00R\aversion\x12 \n" +
	"\vlogfileName\x18\x02 \x01(\tR\vlogfileName\x12$\n" +
	"\rlogfileOffset\x18\x03 \x01(\x03R\rlogfileOffset\x12\x1a\n" +
	"\bserverId\x18\x04 \x01(\x03R\bserverId\x12\"\n" +
	"\fserverenCode\x18\x05 \x01(\tR\fserverenCode\x12 \n" +
	"\vexecuteTime\x18\x06 \x01(\x03R\vexecuteTime\x12H\n" +
	"\n" +
	"sourceType\x18\a \x01(\x0e2&.com.alibaba.otter.canal.protocol.TypeH\x01R\n" +
	"sourceType\x12\x1e\n" +
	"\n" +
	"schemaName\x18\b \x01(\tR\n" +
	"schemaName\x12\x1c\n" +
	"\ttableName\x18\t \x01(\tR\ttableName\x12 \n" +
	"\veventLength\x18\n" +
	" \x01(\x03R\veventLength\x12K\n" +
	"\teventType\x18\v \x01(\x0e2+.com.alibaba.otter.canal.protocol.EventTypeH\x02R\teventType\x12<\n" +
	"\x05props\x18\f \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\x12\x12\n" +
	"\x04gtid\x18\r \x01(\tR\x04gtidB\x11\n" +
	"\x0fversion_presentB\x14\n" +
	"\x12sourceType_presentB\x13\n" +
	"\x11eventType_present\"\xb2\x02\n" +
	"\x06Column\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\x12\x18\n" +
	"\asqlType\x18\x02 \x01(\x05R\asqlType\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x14\n" +
	"\x05isKey\x18\x04 \x01(\bR\x05isKey\x12\x18\n" +
	"\aupdated\x18\x05 \x01(\bR\aupdated\x12\x18\n" +
	"\x06isNull\x18\x06 \x01(\bH\x00R\x06isNull\x12<\n" +
	"\x05props\x18\a \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\x12\x14\n" +
	"\x05value\x18\b \x01(\tR\x05value\x12\x16\n" +
	"\x06length\x18\t \x01(\x05R\x06length\x12\x1c\n" +
	"\tmysqlType\x18\n" +
	" \x01(\tR\tmysqlTypeB\x10\n" +
	"\x0eisNull_present\"\xe5\x01\n" +
	"\aRowData\x12N\n" +
	"\rbeforeColumns\x18\x01 \x03(\v2(.com.alibaba.otter.canal.protocol.ColumnR\rbeforeColumns\x12L\n" +
	"\fafterColumns\x18\x02 \x03(\v2(.com.alibaba.otter.canal.protocol.ColumnR\fafterColumns\x12<\n" +
	"\x05props\x18\x03 \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\"\xed\x02\n" +
	"\tRowChange\x12\x18\n" +
	"\atableId\x18\x01 \x01(\x03R\atableId\x12K\n" +
	"\teventType\x18\x02 \x01(\x0e2+.com.alibaba.otter.canal.protocol.EventTypeH\x00R\teventType\x12\x16\n" +
	"\x05isDdl\x18\n" +
	" \x01(\bH\x01R\x05isDdl\x12\x10\n" +
	"\x03sql\x18\v \x01(\tR\x03sql\x12E\n" +
	"\browDatas\x18\f \x03(\v2).com.alibaba.otter.canal.protocol.RowDataR\browDatas\x12<\n" +
	"\x05props\x18\r \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\x12$\n" +
	"\rddlSchemaName\x18\x0e \x01(\tR\rddlSchemaNameB\x13\n" +
	"\x11eventType_presentB\x0f\n" +
	"\risDdl_present\"\xb4\x01\n" +
	"\x10TransactionBegin\x12 \n" +
	"\vexecuteTime\x18\x01 \x01(\x03R\vexecuteTime\x12$\n" +
	"\rtransactionId\x18\x02 \x01(\tR\rtransactionId\x12<\n" +
	"\x05props\x18\x03 \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\x12\x1a\n" +
	"\bthreadId\x18\x04 \x01(\x03R\bthreadId\"\x96\x01\n" +
	"\x0eTransactionEnd\x12 \n" +
	"\vexecuteTime\x18\x01 \x01(\x03R\vexecuteTime\x12$\n" +
	"\rtransactionId\x18\x02 \x01(\tR\rtransactionId\x12<\n" +
	"\x05props\x18\x03 \x03(\v2&.com.alibaba.otter.canal.protocol.PairR\x05props\".\n" +
	"\x04Pair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value*}\n" +
	"\tEntryType\x12\x1d\n" +
	"\x19ENTRYTYPECOMPATIBLEPROTO2\x10\x00\x12\x14\n" +
	"\x10TRANSACTIONBEGIN\x10\x01\x12\v\n" +
	"\aROWDATA\x10\x02\x12\x12\n" +
	"\x0eTRANSACTIONEND\x10\x03\x12\r\n" +
	"\tHEARTBEAT\x10\x04\x12\v\n" +
	"\aGTIDLOG\x10\x05*\xe5\x01\n" +
	"\tEventType\x12\x1d\n" +
	"\x19EVENTTYPECOMPATIBLEPROTO2\x10\x00\x12\n" +
	"\n" +
	"\x06INSERT\x10\x01\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x02\x12\n" +
	"\n" +
	"\x06DELETE\x10\x03\x12\n" +
	"\n" +
	"\x06CREATE\x10\x04\x12\t\n" +
	"\x05ALTER\x10\x05\x12\t\n" +
	"\x05ERASE\x10\x06\x12\t\n" +
	"\x05QUERY\x10\a\x12\f\n" +
	"\bTRUNCATE\x10\b\x12\n" +
	"\n" +
	"\x06RENAME\x10\t\x12\n" +
	"\n" +
	"\x06CINDEX\x10\n" +
	"\x12\n" +
	"\n" +
	"\x06DINDEX\x10\v\x12\b\n" +
	"\x04GTID\x10\f\x12\f\n" +
	"\bXACOMMIT\x10\r\x12\x0e\n" +
	"\n" +
	"XAROLLBACK\x10\x0e\x12\x0e\n" +
	"\n" +
	"MHEARTBEAT\x10\x0f*B\n" +
	"\x04Type\x12\x18\n" +
	"\x14TYPECOMPATIBLEPROTO2\x10\x00\x12\n" +
	"\n" +
	"\x06ORACLE\x10\x01\x12\t\n" +
	"\x05MYSQL\x10\x02\x12\t\n" +
	"\x05PGSQL\x10\x03B;\n" +
	" com.alibaba.otter.canal.protocolB\n" +
	"CanalEntryH\x01Z\t./;icanalb\x06proto3"

var (
	file_proto_entry_protocol_proto_rawDescOnce sync.Once
	file_proto_entry_protocol_proto_rawDescData []byte
)

func file_proto_entry_protocol_proto_rawDescGZIP() []byte {
	file_proto_entry_protocol_proto_rawDescOnce.Do(func() {
		file_proto_entry_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_entry_protocol_proto_rawDesc), len(file_proto_entry_protocol_proto_rawDesc)))
	})
	return file_proto_entry_protocol_proto_rawDescData
}

var file_proto_entry_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_entry_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_entry_protocol_proto_goTypes = []any{
	(EntryType)(0),           // 0: com.alibaba.otter.canal.protocol.EntryType
	(EventType)(0),           // 1: com.alibaba.otter.canal.protocol.EventType
	(Type)(0),                // 2: com.alibaba.otter.canal.protocol.Type
	(*Entry)(nil),            // 3: com.alibaba.otter.canal.protocol.Entry
	(*Header)(nil),           // 4: com.alibaba.otter.canal.protocol.Header
	(*Column)(nil),           // 5: com.alibaba.otter.canal.protocol.Column
	(*RowData)(nil),          // 6: com.alibaba.otter.canal.protocol.RowData
	(*RowChange)(nil),        // 7: com.alibaba.otter.canal.protocol.RowChange
	(*TransactionBegin)(nil), // 8: com.alibaba.otter.canal.protocol.TransactionBegin
	(*TransactionEnd)(nil),   // 9: com.alibaba.otter.canal.protocol.TransactionEnd
	(*Pair)(nil),             // 10: com.alibaba.otter.canal.protocol.Pair
}
var file_proto_entry_protocol_proto_depIdxs = []int32{
	4,  // 0: com.alibaba.otter.canal.protocol.Entry.header:type_name -> com.alibaba.otter.canal.protocol.Header
	0,  // 1: com.alibaba.otter.canal.protocol.Entry.entryType:type_name -> com.alibaba.otter.canal.protocol.EntryType
	2,  // 2: com.alibaba.otter.canal.protocol.Header.sourceType:type_name -> com.alibaba.otter.canal.protocol.Type
	1,  // 3: com.alibaba.otter.canal.protocol.Header.eventType:type_name -> com.alibaba.otter.canal.protocol.EventType
	10, // 4: com.alibaba.otter.canal.protocol.Header.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	10, // 5: com.alibaba.otter.canal.protocol.Column.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	5,  // 6: com.alibaba.otter.canal.protocol.RowData.beforeColumns:type_name -> com.alibaba.otter.canal.protocol.Column
	5,  // 7: com.alibaba.otter.canal.protocol.RowData.afterColumns:type_name -> com.alibaba.otter.canal.protocol.Column
	10, // 8: com.alibaba.otter.canal.protocol.RowData.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	1,  // 9: com.alibaba.otter.canal.protocol.RowChange.eventType:type_name -> com.alibaba.otter.canal.protocol.EventType
	6,  // 10: com.alibaba.otter.canal.protocol.RowChange.rowDatas:type_name -> com.alibaba.otter.canal.protocol.RowData
	10, // 11: com.alibaba.otter.canal.protocol.RowChange.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	10, // 12: com.alibaba.otter.canal.protocol.TransactionBegin.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	10, // 13: com.alibaba.otter.canal.protocol.TransactionEnd.props:type_name -> com.alibaba.otter.canal.protocol.Pair
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_entry_protocol_proto_init() }
func file_proto_entry_protocol_proto_init() {
	if File_proto_entry_protocol_proto != nil {
		return
	}
	file_proto_entry_protocol_proto_msgTypes[0].OneofWrappers = []any{
		(*Entry_EntryType)(nil),
	}
	file_proto_entry_protocol_proto_msgTypes[1].OneofWrappers = []any{
		(*Header_Version)(nil),
		(*Header_SourceType)(nil),
		(*Header_EventType)(nil),
	}
	file_proto_entry_protocol_proto_msgTypes[2].OneofWrappers = []any{
		(*Column_IsNull)(nil),
	}
	file_proto_entry_protocol_proto_msgTypes[4].OneofWrappers = []any{
		(*RowChange_EventType)(nil),
		(*RowChange_IsDdl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_entry_protocol_proto_rawDesc), len(file_proto_entry_protocol_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_entry_protocol_proto_goTypes,
		DependencyIndexes: file_proto_entry_protocol_proto_depIdxs,
		EnumInfos:         file_proto_entry_protocol_proto_enumTypes,
		MessageInfos:      file_proto_entry_protocol_proto_msgTypes,
	}.Build()
	File_proto_entry_protocol_proto = out.File
	file_proto_entry_protocol_proto_goTypes = nil
	file_proto_entry_protocol_proto_depIdxs = nil
}
